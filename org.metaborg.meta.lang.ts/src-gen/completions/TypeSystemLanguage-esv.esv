module src-gen/completions/TypeSystemLanguage-esv

imports
  src-gen/completions/common/Identifiers-esv
  src-gen/completions/common/Layout-esv
  src-gen/completions/terms/Terms-esv
  src-gen/completions/terms/Vars-esv
  src-gen/completions/Module-esv
  src-gen/completions/Signatures-esv
  src-gen/completions/TypeFunctions-esv
  src-gen/completions/Relations-esv
  src-gen/completions/PP-esv

completions
  completion template ModuleSection : "type rules " =
    "type rules\n\n\t" (cursor) (blank)  
  completion template TypeRule : "PropPattern where Formula" =
    <PropPattern:PropPattern> "\nwhere " <Formula:Formula> (blank)  
  completion template TypeRule : " : Term" =
    <:Id> " : " <Term:Term> (blank)    
  completion template TypeRule : " : -> Term" =
    <:Id> " : " <:Pattern> " -> " <Term:Term> (blank)  
  completion template TypeRule : " : -> Term where Formula" =
    <:Id> " : " <:Pattern> " -> " <Term:Term> "\nwhere " <Formula:Formula> (blank)  

completions
  completion template Formula : "Formula else error Term on Term" =
    <Formula:Formula> " else error " <Term:Term> " on " <Term:Term> (blank)  
  completion template Formula : "not Formula" =
    "not " <Formula:Formula> (blank)  
  completion template Formula : "Formula or Formula" =
    <Formula:Formula> "\nor " <Formula:Formula> (blank)  
  completion template Formula : "Formula and Formula" =
    <Formula:Formula> "\nand " <Formula:Formula> (blank)  
  completion template Formula : "LId :: Formula" =
    <LId:LId> " :: " <Formula:Formula> (blank)  
  completion template Formula : "(Formula)" =
    "(" <Formula:Formula> ")"  

completions
  completion template Formula : "[]" =
    "[" <:Instruction> "]"        
  completion template Instruction : "Formula;" =
    <Formula:Formula> ";"  
  completion template Instruction : "Formula provided VarRef;" =
    <Formula:Formula> " provided " <VarRef:VarRef> ";"  
  completion template Instruction : "Var := Formula;" =
    <Var:Var> " := " <Formula:Formula> ";"  
  completion template Instruction : "Var := Formula provided VarRef;" =
    <Var:Var> " := " <Formula:Formula> " provided " <VarRef:VarRef> ";"  

completions
  completion template Prop : "true" =
    "true"       
  completion template Prop : "false" =
    "false"     
  completion template Prop : "Term : Pattern" =
    <Term:Term> " : " <Pattern:Pattern>  
  completion template Prop : "Term has Id Pattern" =
    <Term:Term> " has " <Id:Id> " " <Pattern:Pattern>  
  completion template Prop : "Term == Term" =
    <Term:Term> " == " <Term:Term>  
  completion template Prop : "Term => Pattern" =
    <Term:Term> " => " <Pattern:Pattern>  
  completion template Prop : "Term bind Var" =
    <Term:Term> " bind " <Var:Var>  
  completion template Prop : "VarRef project Pattern" =
    <VarRef:VarRef> " project " <Pattern:Pattern>  
  completion template Prop : "return Term" =
    "return " <Term:Term>  

completions
  completion template PropPattern : " : Term" =
    <:Pattern> " : " <Term:Term>  
  completion template PropPattern : " has Id Term" =
    <:Pattern> " has " <Id:Id> " " <Term:Term>  
  completion template PropPattern : " :-" =
    <:Pattern> " :-"  

completions
  completion template Term : "definition of Term" =
    "definition of " <Term:Term>  
  completion template Term : "Term or Term" =
    <Term:Term> " or " <Term:Term>  
  completion template Term : "Term union Term" =
    <Term:Term> " union " <Term:Term>  