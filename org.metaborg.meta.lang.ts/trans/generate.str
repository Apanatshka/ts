module generate

imports
	
	include/TypeSystemLanguage
	lib/runtime/nabl/-
	lib/runtime/task/-
	pp
	desugar
	label
  
rules 
 
  to-stratego(|project-path, modname) : 
    Module(name, section*) ->
    $[module [modname]
    
      [import]
      [import*]
      signature constructors
      	
        [sig*]
        
      rules // functions 
        [func*]

      rules // relations
        [rel*]

      rules // rules
        [rule*]

      rules // projections
        [projection*]
    ]
    where sig*        := <collect(signature-to-stratego)> section*
    	  ; func*       := <collect(function-to-stratego)> section*
    		; rel*        := <collect(relation-to-stratego)> section*
    	  ; rule*       := <collect(rule-to-stratego)> section*
        ; projection* := <bagof-Projections>
        ; import*     := <collect(imports-to-stratego)> section*
        ; if <collect-all(?ImportWildcard(<string-ends-with(|"/types")>))> section* => []
          then
            import := 
              $[imports
              	  
                  lib/runtime/nabl/-
                  lib/runtime/task/-
                  lib/runtime/types/-
                  lib/runtime/properties/-
                  lib/runtime/relations/-
               ]
         else
           import := ""
         end 
 
rules
  
  imports-to-stratego:
    Imports(import*) -> 
    $[imports
      
        [<map(import-to-stratego)> import*]]
    
  import-to-stratego:
    Import(t) -> 
    $[[t]
    ]
    where task := <nabl-collect-use-task> t
        ; <task-has-failed> task
    
  import-to-stratego:
    Import(t) -> 
    $[[t].generated
    ]
    where task := <nabl-collect-use-task> t
        ; <not(task-has-failed)> task
    
  import-to-stratego:
    ImportWildcard(t) -> 
    $[[t]/-
    ]
        
rules
	
	task-dependencies =
		collect(?Label(<![<id>]>, _) <+ ?Match(_, <pattern-vars>)); concat; make-set
		
  pattern-vars =
    collect(?Var(<id>))

rules // signatures
	
	signature-to-stratego :
		SignatureRule(n, t) -> $[[n] : [<signature-type-to-stratego> t]
		]
		
	signature-type-to-stratego :
		SigType(sort*, t) -> $[[<separate-by(|" * "); concat-strings> sort*] -> [t]]
		
	signature-type-to-stratego :
		SigInj(t) -> $[[t]]

rules // functions
	
	function-to-stratego :
		TypeFunction(n, pat, trm, form) -> ${
			type-func-{n}(|ctx) : 
				{<term-to-stratego> pat} -> <task-create-id(|ctx, [{deps}])> {<term-to-stratego> trm}
				where {s}
		}
		where (_, s) := <formula-to-stratego> form
		    ; deps := <task-dependencies; separate-by(|", "); concat-strings> form
		
	function-to-stratego :
		TypeFunctionUnCond(n, pat, trm) -> $[
			type-func-[n](|ctx) : 
				[<term-to-stratego> pat] -> [<term-to-stratego> trm]
		]
                    
	formula-to-stratego :
		Label(l, FuncAppl(n, trm, Var(x))) ->
			(l, $[[x] := <type-func-[n](|ctx)> [<term-to-stratego> trm]])

rules // relations

	relation-to-stratego :
		RelationDef(prop*, rel) -> <map(relation-prop-to-stratego(|rel)); concat-strings> prop*
		
	relation-prop-to-stratego(|rel) :
    Reflexive() -> $[
      relation-is-reflexive = ?"[rel]"
    ]
	relation-prop-to-stratego(|rel) :
    Transitive() -> $[
      relation-is-transitive = ?"[rel]"
    ]
	relation-prop-to-stratego(|rel) :
    Symmetric() -> $[
      relation-is-symmetric = ?"[rel]"
    ]
	
	relation-to-stratego :
    RelationUnCond(trm1, rel, trm2) -> $[
      relation-store-value(store): ("[rel]", [trm1s]) -> <store> [trm2s]
      relation-match-tuple = ?("[rel]", [trm1s], [trm2s])
    ]
    where <term-to-stratego>trm1 => trm1s
    	  ; <term-to-stratego>trm2 => trm2s
    
  relation-to-stratego :
  	Relation(trm1, rel, trm2, form) -> ${
      type-relation-match(|ctx) : 
        ("{rel}", {<term-to-stratego>trm1}, {<term-to-stratego>trm2}) -> <task-create-id(|ctx, [{deps}])> {<term-to-stratego>trm2}
        where {s}
  	}
    where (_, s) := <formula-to-stratego> form
        ; deps := <task-dependencies; separate-by(|", "); concat-strings> form
          
  formula-to-stratego :
    Label(l, RelationMatch(trm1, rel, trm2)) ->
      (l, ${{l} := <![<type-relation-match(|ctx) <+ task-create-fail(|ctx)>, <relation-create-match(|ctx)>]; task-create-choice(|ctx)> ("{rel}", {<term-to-stratego>trm1}, {<term-to-stratego>trm2})})
      
  formula-to-stratego :
    Label(l, RelationStore(trm1, rel, trm2)) ->
      (l, $[[l] := <new-rel-tuple(|ctx, "[rel]", [<term-to-stratego>trm2])> [<term-to-stratego>trm1]])
 
rules // conditional rule

  rule-to-stratego :
    TypeRule(HasPat(pat, kind, trm), form) -> ${
      create-{kind}-task(|ctx) :
        {<term-to-stratego>pat} -> <task-create-id(|ctx, [{deps}])> {<term-to-stratego>trm}
        where {s}
    } 
    where (_, s) := <formula-to-stratego> form
        ; deps := <task-dependencies; separate-by(|", "); concat-strings> form
          
  // todo: target for WF rules
  rule-to-stratego :
    TypeRule(IsWF(pat), form) -> $[
      nabl-constraint(|ctx) :
        [<term-to-stratego>pat] -> <fail>
        where [s]
    ]
    where (_, s) := <formula-to-stratego> form
        ; deps := <task-dependencies; separate-by(|", "); concat-strings> form
  
rules // formula
      
  formula-to-stratego :
    True() -> ("", $[id])
    
  formula-to-stratego :
    And(form1, form2) -> 
      (t2, $[[s1];
             [s2]])
    where (t1, s1) := <formula-to-stratego> form1
        ; (t2, s2) := <formula-to-stratego> form2

  formula-to-stratego :
    Label(l, Or(form1, form2)) -> 
      (l, $[[s1];
            [s2];
            [l] := <new-task(|ctx)> Choice($[$[t1],[t2]$]$)])
    where (t1, s1) := <formula-to-stratego> form1
        ; (t2, s2) := <formula-to-stratego> form2
        //; t3 := <newname> "task"
        
  formula-to-stratego :
    Else(form, msg, target) -> 
      (t, $[[s];
            <task-create-error-on-failure(|ctx, [t], [<term-to-stratego>msg])> [<term-to-stratego>target]])
    where (t, s) := <formula-to-stratego> form
            
  formula-to-stratego :
    Label(l, Has(VarRef(x), attr, Var(t))) -> 
      (t, $[[t] := <[attr]-task(|ctx)> [x]])
      
  formula-to-stratego :
    Label(l, Has(DefOf(trm), op, Var(t))) -> 
      (t, $[[t] := <[op]-lookup(|ctx)> [<term-to-stratego>trm]])
 
  formula-to-stratego :
    Label(l, Eq(trm1, trm2)) -> 
      (l, $[[l] := <type-match(|ctx, [<term-to-stratego>trm2])> [<term-to-stratego>trm1]])

  formula-to-stratego :
    Label(l, Match(pat, Var(x))) -> (l, strat)
    where
      strat := $[[x] := <type-is(|ctx)> [<term-to-stratego>pat]] 

  formula-to-stratego :
    Match(x@VarRef(_), pat) -> (<Hd> ys, strat)
    where
      <not(?Var(_))> pat;
      ys := <pattern-vars; not([])> pat;
      strat := <map(mk-projection(|x, pat)); separate-by(|";\n")> ys
      
   mk-projection(|x, pat) :
     y -> $[[y] := <new-task(|ctx)> Rewrite("[rl]", [<term-to-stratego>x])]
     where rl := <newname> "proj"
         ; r := $[
             task-rewrite :
               ("[rl]", [<term-to-stratego>pat]) -> [y]
           ]
         ; rules( Projections :+ _ -> r )
                 
  // match against closed term (use == instead?)
  formula-to-stratego :
    Label(l, Match(x, pat)) -> (l, $[[l] := <new-task(|ctx)> Rewrite("[rl]", [<term-to-stratego>x])])
    where
      [] := <pattern-vars> pat;
      rl := <newname> "match";
      r := $[
        task-rewrite :
          ("[rl]", x@[<term-to-stratego>pat]) -> x
      ];
      rules( Projections :+ _ -> r)
      
  formula-to-stratego :
    Label(l, Match(Union(trm1, trm2), Var(x))) -> 
      (l, $[[x] := <new-task(|ctx)> Combine($[$[<term-to-stratego>trm1], [<term-to-stratego>trm2]$]$)])

  formula-to-stratego :
    Label(l, Match(Choice(trm1, trm2), Var(x))) -> 
      (l, $[[x] := <new-task(|ctx)> Choice($[$[<term-to-stratego>trm1], [<term-to-stratego>trm2]$]$)])

rules // term
  
  term-to-stratego :
    Wld() -> "_"
    
  term-to-stratego :
    Var(x) -> x
    
  term-to-stratego :
    VarRef(x) -> x

  term-to-stratego :
    ListVar(x) -> x
    
  term-to-stratego :
    ListVarRef(x) -> x
        
  term-to-stratego :
    Int(i) -> i
    
  term-to-stratego :
    Real(r) -> r
    
  term-to-stratego :
    Str(s) -> s

  term-to-stratego :
    Char(s) -> s
        
  term-to-stratego :
    As(v, p) -> $[[<term-to-stratego>v]@[<term-to-stratego>p]]
    
  term-to-stratego :
    Op(cns, t*) -> $[[cns]([<map(term-to-stratego); separate-by(|", ")> t*])]
    
  term-to-stratego :
    OpQ(cns, t*) -> $["[cns]"([<map(term-to-stratego); separate-by(|", ")> t*])]
            
  term-to-stratego :
    Tuple(t*) -> $[([<map(term-to-stratego); separate-by(|", ")> t*])]

  term-to-stratego :
    List(t*) -> $<[<<map(term-to-stratego); separate-by(|", ")> t*>]>
    
  term-to-stratego :
    ListTail(t*, t) -> $<[<<map(term-to-stratego); separate-by(|", ")> t*> | <<term-to-stratego>t>]>
    
  term-to-stratego : 
  	StrInterp(StringQuotation1(_, part*)) -> $<[<<map(strinterp-part-to-stratego); separate-by(|", ")> part*>]>
  	
	strinterp-part-to-stratego : 
		QStr(s) -> $["[s]"]
		
	strinterp-part-to-stratego : 
		StringEscape1(_, VarRef(x)) -> $[[x]] 
