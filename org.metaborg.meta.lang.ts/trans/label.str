module label

imports include/TypeSystemLanguage

rules

  label-formulas =
    alltd(TypeRule(id, label-formula) + TypeFunction(id, id, id, label-formula))
    
  label-formula :
    True() -> True()
    
  label-formula :
    Label(l, form) -> <label-formula> form
    
  label-formula :
    And(form1, form2) -> And(form1', form2')
    where form1' := <label-formula> form1
        ; form2' := <label-formula> form2

  label-formula :
    Or(form1, form2) -> Label(l, Or(form1', form2'))
    where form1' := <label-formula> form1
        ; form2' := <label-formula> form2   
        ; l := <newname> "or"    

  label-formula :
    Else(form, msg, target) -> Else(<label-formula>form, msg, target)

  label-formula :
    form@Has(trm, op, Var(t)) -> Label(t, form)
        
  label-formula :
    form@HasType(trm, Var(t)) -> Label(t, form)
    
  label-formula :
    form@SubType(trm1, op, trm2) -> Label(<newname> "subtype", form)
  
  label-formula :
    form@Eq(trm1, trm2) -> Label(<newname> "eq", form)
    
  label-formula :
    form@Match(_, pat) -> form'
    where if <collect-all(?Var(_))> pat => [] then
            form' := Label(<newname> "match", form)
          else
            form' := form
          end

  label-formula :
    form@Match(Combine(_,_), Var(x)) -> Label(x, form)
    
  label-formula : 
  	form@FuncAppl(n, trm, Var(x)) -> Label(x, form)
