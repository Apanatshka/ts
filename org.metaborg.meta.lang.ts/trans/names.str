module names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-
  include/TypeSystemLanguage


signature
  constructors
    NablNsVariable     : Namespace
    NablNsListVariable : Namespace


rules

  nabl-scoping-site =
    ?TypeRule(_, _)
    ; nabl-scope(|[NablNsVariable()])

  nabl-get-scope =
    ?TypeRule(_, _)
    ; ![NablNsVariable()]

  nabl-get-name :
    Var(x) -> x

  nabl-name-apply(s) =
    Var(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Var(x)
    ; origin-track-forced(
        Var(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , NonUnique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    ListVar(x) -> x

  nabl-name-apply(s) =
    ListVar(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?ListVar(x)
    ; origin-track-forced(
        ListVar(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsListVariable()
          , NonUnique()
          , Current()
          , []
          , []
          )
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    VarRef(x) -> x

  nabl-name-apply(s) =
    VarRef(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?VarRef(x)
    ; origin-track-forced(
        VarRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsVariable()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    ListVarRef(x) -> x

  nabl-name-apply(s) =
    ListVarRef(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?ListVarRef(x)
    ; origin-track-forced(
        ListVarRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsListVariable()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )