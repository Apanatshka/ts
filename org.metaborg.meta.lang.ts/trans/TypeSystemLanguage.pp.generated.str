module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a172
                    ]
    where a172 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a173]
                           )
                         ]
    where a173 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a174]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b77]
                        )
                      ]
    where a174 := <pp-one-Z(prettyprint-PropPattern)> a
    where b77 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a175]
           )
         ]
    where a175 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a176
                         , S(" else error ")
                         , b78
                         , S(" on ")
                         , c28
                         ]
                       )
                     ]
    where a176 := <pp-one-Z(prettyprint-Formula)> a
    where b78 := <pp-one-Z(prettyprint-Term)> b
    where c28 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a177]
                )
              ]
    where a177 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a178]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b79]
                  )
                ]
    where a178 := <pp-one-Z(prettyprint-Formula)> a
    where b79 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a179]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b80]
                   )
                 ]
    where a179 := <pp-one-Z(prettyprint-Formula)> a
    where b80 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a180, S(" :: "), b81]
                     )
                   ]
    where a180 := <pp-one-Z(prettyprint-LId)> a
    where b81 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a181, S(")")]
                          )
                        ]
    where a181 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-SubTypeOp =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SubTypeOp


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a182, S(" : "), b82]
                       )
                     ]
    where a182 := <pp-one-Z(prettyprint-Term)> a
    where b82 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    SubType(a, b, c) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a183
                            , S(" ")
                            , b83
                            , S(" ")
                            , c29
                            ]
                          )
                        ]
    where a183 := <pp-one-Z(prettyprint-Term)> a
    where b83 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c29 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a184
                        , S(" has ")
                        , b84
                        , S(" ")
                        , c30
                        ]
                      )
                    ]
    where a184 := <pp-one-Z(prettyprint-Term)> a
    where b84 := <pp-one-Z(prettyprint-Id)> b
    where c30 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a185, S(" == "), b85]
                  )
                ]
    where a185 := <pp-one-Z(prettyprint-Term)> a
    where b85 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a186, S(" => "), b86]
                     )
                   ]
    where a186 := <pp-one-Z(prettyprint-Term)> a
    where b86 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a187, S(" : "), b87]
                          )
                        ]
    where a187 := <pp-one-Z(prettyprint-Pattern)> a
    where b87 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    SubTypePat(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a188
                               , S(" ")
                               , b88
                               , S(" ")
                               , c31
                               ]
                             )
                           ]
    where a188 := <pp-one-Z(prettyprint-Pattern)> a
    where b88 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c31 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a189
                           , S(" has ")
                           , b89
                           , S(" ")
                           , c32
                           ]
                         )
                       ]
    where a189 := <pp-one-Z(prettyprint-Pattern)> a
    where b89 := <pp-one-Z(prettyprint-Id)> b
    where c32 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a190, S(" :-")]
                 )
               ]
    where a190 := <pp-one-Z(prettyprint-Pattern)> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a191]
                  )
                ]
    where a191 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Combine(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a192, S(" or "), b90]
                       )
                     ]
    where a192 := <pp-one-Z(prettyprint-Term)> a
    where b90 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id