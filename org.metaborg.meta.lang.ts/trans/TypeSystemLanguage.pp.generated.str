module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a46
                    ]
    where a46 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a47]
                           )
                         ]
    where a47 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a48]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b30]
                        )
                      ]
    where a48 := <pp-one-Z(prettyprint-PropPattern)> a
    where b30 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a49]
           )
         ]
    where a49 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a50
                         , S(" else error ")
                         , b31
                         , S(" on ")
                         , c10
                         ]
                       )
                     ]
    where a50 := <pp-one-Z(prettyprint-Formula)> a
    where b31 := <pp-one-Z(prettyprint-Term)> b
    where c10 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a51]
                )
              ]
    where a51 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a52]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b32]
                  )
                ]
    where a52 := <pp-one-Z(prettyprint-Formula)> a
    where b32 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a53]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b33]
                   )
                 ]
    where a53 := <pp-one-Z(prettyprint-Formula)> a
    where b33 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a54, S(" :: "), b34]
                     )
                   ]
    where a54 := <pp-one-Z(prettyprint-LId)> a
    where b34 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a55, S(")")]
                          )
                        ]
    where a55 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-SubTypeOp =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SubTypeOp


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a56, S(" : "), b35]
                       )
                     ]
    where a56 := <pp-one-Z(prettyprint-Term)> a
    where b35 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    SubType(a, b, c) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a57
                            , S(" ")
                            , b36
                            , S(" ")
                            , c11
                            ]
                          )
                        ]
    where a57 := <pp-one-Z(prettyprint-Term)> a
    where b36 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c11 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a58
                        , S(" has ")
                        , b37
                        , S(" ")
                        , c12
                        ]
                      )
                    ]
    where a58 := <pp-one-Z(prettyprint-Term)> a
    where b37 := <pp-one-Z(prettyprint-Id)> b
    where c12 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a59, S(" == "), b38]
                  )
                ]
    where a59 := <pp-one-Z(prettyprint-Term)> a
    where b38 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a60, S(" => "), b39]
                     )
                   ]
    where a60 := <pp-one-Z(prettyprint-Term)> a
    where b39 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a61, S(" : "), b40]
                          )
                        ]
    where a61 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b40 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    SubTypePat(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a62
                               , S(" ")
                               , b41
                               , S(" ")
                               , c13
                               ]
                             )
                           ]
    where a62 := <pp-one-Z(prettyprint-Pattern)> a
    where b41 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c13 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a63
                           , S(" has ")
                           , b42
                           , S(" ")
                           , c14
                           ]
                         )
                       ]
    where a63 := <pp-one-Z(prettyprint-Pattern)> a
    where b42 := <pp-one-Z(prettyprint-Id)> b
    where c14 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a64, S(" :-")]
                 )
               ]
    where a64 := <pp-H-list(prettyprint-Pattern|" + ")> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a65]
                  )
                ]
    where a65 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Combine(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a66, S(" or "), b43]
                       )
                     ]
    where a66 := <pp-one-Z(prettyprint-Term)> a
    where b43 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id