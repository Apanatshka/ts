module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a646
                    ]
    where a646 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a647]
                           )
                         ]
    where a647 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a648]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b348]
                        )
                      ]
    where a648 := <pp-one-Z(prettyprint-PropPattern)> a
    where b348 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a649]
           )
         ]
    where a649 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a650
                         , S(" else error ")
                         , b349
                         , S(" on ")
                         , c104
                         ]
                       )
                     ]
    where a650 := <pp-one-Z(prettyprint-Formula)> a
    where b349 := <pp-one-Z(prettyprint-Term)> b
    where c104 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a651]
                )
              ]
    where a651 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a652]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b350]
                  )
                ]
    where a652 := <pp-one-Z(prettyprint-Formula)> a
    where b350 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a653]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b351]
                   )
                 ]
    where a653 := <pp-one-Z(prettyprint-Formula)> a
    where b351 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a654, S(" :: "), b352]
                     )
                   ]
    where a654 := <pp-one-Z(prettyprint-LId)> a
    where b352 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a655, S(")")]
                          )
                        ]
    where a655 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-SubTypeOp =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SubTypeOp


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a656, S(" : "), b353]
                       )
                     ]
    where a656 := <pp-one-Z(prettyprint-Term)> a
    where b353 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    SubType(a, b, c) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a657
                            , S(" ")
                            , b354
                            , S(" ")
                            , c105
                            ]
                          )
                        ]
    where a657 := <pp-one-Z(prettyprint-Term)> a
    where b354 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c105 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    StoreSubType(a, b, c) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ S("store ")
                                 , a658
                                 , S(" ")
                                 , b355
                                 , S(" ")
                                 , c106
                                 ]
                               )
                             ]
    where a658 := <pp-one-Z(prettyprint-Term)> a
    where b355 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c106 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a659
                        , S(" has ")
                        , b356
                        , S(" ")
                        , c107
                        ]
                      )
                    ]
    where a659 := <pp-one-Z(prettyprint-Term)> a
    where b356 := <pp-one-Z(prettyprint-Id)> b
    where c107 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a660, S(" == "), b357]
                  )
                ]
    where a660 := <pp-one-Z(prettyprint-Term)> a
    where b357 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a661, S(" => "), b358]
                     )
                   ]
    where a661 := <pp-one-Z(prettyprint-Term)> a
    where b358 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a662, S(" : "), b359]
                          )
                        ]
    where a662 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b359 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    SubTypePat(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a663
                               , S(" ")
                               , b360
                               , S(" ")
                               , c108
                               ]
                             )
                           ]
    where a663 := <pp-one-Z(prettyprint-Pattern)> a
    where b360 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c108 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a664
                           , S(" has ")
                           , b361
                           , S(" ")
                           , c109
                           ]
                         )
                       ]
    where a664 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b361 := <pp-one-Z(prettyprint-Id)> b
    where c109 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a665, S(" :-")]
                 )
               ]
    where a665 := <pp-H-list(prettyprint-Pattern|" + ")> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a666]
                  )
                ]
    where a666 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Union(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a667, S(" union "), b362]
                     )
                   ]
    where a667 := <pp-one-Z(prettyprint-Term)> a
    where b362 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Choice(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [a668, S(" or "), b363]
                      )
                    ]
    where a668 := <pp-one-Z(prettyprint-Term)> a
    where b363 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id