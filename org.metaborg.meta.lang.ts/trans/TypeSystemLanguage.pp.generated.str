module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a21
                    ]
    where a21 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a22]
                           )
                         ]
    where a22 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a23]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b13]
                        )
                      ]
    where a23 := <pp-one-Z(prettyprint-PropPattern)> a
    where b13 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a24]
           )
         ]
    where a24 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a25
                         , S(" else error ")
                         , b14
                         , S(" on ")
                         , c8
                         ]
                       )
                     ]
    where a25 := <pp-one-Z(prettyprint-Formula)> a
    where b14 := <pp-one-Z(prettyprint-Term)> b
    where c8 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a26]
                )
              ]
    where a26 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a27]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b15]
                  )
                ]
    where a27 := <pp-one-Z(prettyprint-Formula)> a
    where b15 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a28]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b16]
                   )
                 ]
    where a28 := <pp-one-Z(prettyprint-Formula)> a
    where b16 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a29, S(" :: "), b17]
                     )
                   ]
    where a29 := <pp-one-Z(prettyprint-LId)> a
    where b17 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a30, S(")")]
                          )
                        ]
    where a30 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-Formula :
    Is(a) -> [ H(
                 [SOpt(HS(), "0")]
               , [S("["), a31, S("]")]
               )
             ]
    where a31 := <pp-V-list(prettyprint-Instruction)> a

  prettyprint-Instruction :
    I(a) -> [ H(
                [SOpt(HS(), "0")]
              , [a32, S(";")]
              )
            ]
    where a32 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Instruction :
    Id(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [ a33
                    , S(" provided ")
                    , b18
                    , S(";")
                    ]
                  )
                ]
    where a33 := <pp-one-Z(prettyprint-Formula)> a
    where b18 := <pp-one-Z(prettyprint-VarRef)> b

  prettyprint-Instruction :
    Ia(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [ a34
                    , S(" := ")
                    , b19
                    , S(";")
                    ]
                  )
                ]
    where a34 := <pp-one-Z(prettyprint-Var)> a
    where b19 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Instruction :
    Iad(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a35
                        , S(" := ")
                        , b20
                        , S(" provided ")
                        , c9
                        , S(";")
                        ]
                      )
                    ]
    where a35 := <pp-one-Z(prettyprint-Var)> a
    where b20 := <pp-one-Z(prettyprint-Formula)> b
    where c9 := <pp-one-Z(prettyprint-VarRef)> c

  prettyprint-example =
    prettyprint-Formula

  prettyprint-example =
    prettyprint-Instruction


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a36, S(" : "), b21]
                       )
                     ]
    where a36 := <pp-one-Z(prettyprint-Term)> a
    where b21 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a37
                        , S(" has ")
                        , b22
                        , S(" ")
                        , c10
                        ]
                      )
                    ]
    where a37 := <pp-one-Z(prettyprint-Term)> a
    where b22 := <pp-one-Z(prettyprint-Id)> b
    where c10 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a38, S(" == "), b23]
                  )
                ]
    where a38 := <pp-one-Z(prettyprint-Term)> a
    where b23 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a39, S(" => "), b24]
                     )
                   ]
    where a39 := <pp-one-Z(prettyprint-Term)> a
    where b24 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    Bind(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [a40, S(" bind "), b25]
                    )
                  ]
    where a40 := <pp-one-Z(prettyprint-Term)> a
    where b25 := <pp-one-Z(prettyprint-Var)> b

  prettyprint-Prop :
    Project(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a41, S(" project "), b26]
                       )
                     ]
    where a41 := <pp-one-Z(prettyprint-VarRef)> a
    where b26 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    Return(a) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("return "), a42]
                   )
                 ]
    where a42 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a43, S(" : "), b27]
                          )
                        ]
    where a43 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b27 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a44
                           , S(" has ")
                           , b28
                           , S(" ")
                           , c11
                           ]
                         )
                       ]
    where a44 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b28 := <pp-one-Z(prettyprint-Id)> b
    where c11 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a45, S(" :-")]
                 )
               ]
    where a45 := <pp-H-list(prettyprint-Pattern|" + ")> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a46]
                  )
                ]
    where a46 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Choice(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [a47, S(" or "), b29]
                      )
                    ]
    where a47 := <pp-one-Z(prettyprint-Term)> a
    where b29 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Union(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a48, S(" union "), b30]
                     )
                   ]
    where a48 := <pp-one-Z(prettyprint-Term)> a
    where b30 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id