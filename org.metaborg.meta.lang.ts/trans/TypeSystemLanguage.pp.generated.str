module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a103
                    ]
    where a103 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a104]
                           )
                         ]
    where a104 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a105]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b68]
                        )
                      ]
    where a105 := <pp-one-Z(prettyprint-PropPattern)> a
    where b68 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a106]
           )
         ]
    where a106 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a107
                         , S(" else error ")
                         , b69
                         , S(" on ")
                         , c28
                         ]
                       )
                     ]
    where a107 := <pp-one-Z(prettyprint-Formula)> a
    where b69 := <pp-one-Z(prettyprint-Term)> b
    where c28 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a108]
                )
              ]
    where a108 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a109]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b70]
                  )
                ]
    where a109 := <pp-one-Z(prettyprint-Formula)> a
    where b70 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a110]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b71]
                   )
                 ]
    where a110 := <pp-one-Z(prettyprint-Formula)> a
    where b71 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a111, S(" :: "), b72]
                     )
                   ]
    where a111 := <pp-one-Z(prettyprint-LId)> a
    where b72 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a112, S(")")]
                          )
                        ]
    where a112 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-SubTypeOp =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SubTypeOp


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a113, S(" : "), b73]
                       )
                     ]
    where a113 := <pp-one-Z(prettyprint-Term)> a
    where b73 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    SubType(a, b, c) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a114
                            , S(" ")
                            , b74
                            , S(" ")
                            , c29
                            ]
                          )
                        ]
    where a114 := <pp-one-Z(prettyprint-Term)> a
    where b74 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c29 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    StoreSubType(a, b, c) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ S("store ")
                                 , a115
                                 , S(" ")
                                 , b75
                                 , S(" ")
                                 , c30
                                 ]
                               )
                             ]
    where a115 := <pp-one-Z(prettyprint-Term)> a
    where b75 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c30 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a116
                        , S(" has ")
                        , b76
                        , S(" ")
                        , c31
                        ]
                      )
                    ]
    where a116 := <pp-one-Z(prettyprint-Term)> a
    where b76 := <pp-one-Z(prettyprint-Id)> b
    where c31 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a117, S(" == "), b77]
                  )
                ]
    where a117 := <pp-one-Z(prettyprint-Term)> a
    where b77 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a118, S(" => "), b78]
                     )
                   ]
    where a118 := <pp-one-Z(prettyprint-Term)> a
    where b78 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a119, S(" : "), b79]
                          )
                        ]
    where a119 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b79 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    SubTypePat(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a120
                               , S(" ")
                               , b80
                               , S(" ")
                               , c32
                               ]
                             )
                           ]
    where a120 := <pp-one-Z(prettyprint-Pattern)> a
    where b80 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c32 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a121
                           , S(" has ")
                           , b81
                           , S(" ")
                           , c33
                           ]
                         )
                       ]
    where a121 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b81 := <pp-one-Z(prettyprint-Id)> b
    where c33 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a122, S(" :-")]
                 )
               ]
    where a122 := <pp-H-list(prettyprint-Pattern|" + ")> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a123]
                  )
                ]
    where a123 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Combine(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a124, S(" or "), b82]
                       )
                     ]
    where a124 := <pp-one-Z(prettyprint-Term)> a
    where b82 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id