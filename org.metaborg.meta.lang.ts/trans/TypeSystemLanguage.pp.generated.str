module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a102
                    ]
    where a102 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a103]
                           )
                         ]
    where a103 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a104]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b55]
                        )
                      ]
    where a104 := <pp-one-Z(prettyprint-PropPattern)> a
    where b55 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a105]
           )
         ]
    where a105 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a106
                         , S(" else error ")
                         , b56
                         , S(" on ")
                         , c17
                         ]
                       )
                     ]
    where a106 := <pp-one-Z(prettyprint-Formula)> a
    where b56 := <pp-one-Z(prettyprint-Term)> b
    where c17 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a107]
                )
              ]
    where a107 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a108]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b57]
                  )
                ]
    where a108 := <pp-one-Z(prettyprint-Formula)> a
    where b57 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a109]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b58]
                   )
                 ]
    where a109 := <pp-one-Z(prettyprint-Formula)> a
    where b58 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a110, S(" :: "), b59]
                     )
                   ]
    where a110 := <pp-one-Z(prettyprint-LId)> a
    where b59 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a111, S(")")]
                          )
                        ]
    where a111 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-SubTypeOp =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SubTypeOp


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a112, S(" : "), b60]
                       )
                     ]
    where a112 := <pp-one-Z(prettyprint-Term)> a
    where b60 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    SubType(a, b, c) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a113
                            , S(" ")
                            , b61
                            , S(" ")
                            , c18
                            ]
                          )
                        ]
    where a113 := <pp-one-Z(prettyprint-Term)> a
    where b61 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c18 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    StoreSubType(a, b, c) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ S("store ")
                                 , a114
                                 , S(" ")
                                 , b62
                                 , S(" ")
                                 , c19
                                 ]
                               )
                             ]
    where a114 := <pp-one-Z(prettyprint-Term)> a
    where b62 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c19 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a115
                        , S(" has ")
                        , b63
                        , S(" ")
                        , c20
                        ]
                      )
                    ]
    where a115 := <pp-one-Z(prettyprint-Term)> a
    where b63 := <pp-one-Z(prettyprint-Id)> b
    where c20 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a116, S(" == "), b64]
                  )
                ]
    where a116 := <pp-one-Z(prettyprint-Term)> a
    where b64 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a117, S(" => "), b65]
                     )
                   ]
    where a117 := <pp-one-Z(prettyprint-Term)> a
    where b65 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a118, S(" : "), b66]
                          )
                        ]
    where a118 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b66 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    SubTypePat(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a119
                               , S(" ")
                               , b67
                               , S(" ")
                               , c21
                               ]
                             )
                           ]
    where a119 := <pp-one-Z(prettyprint-Pattern)> a
    where b67 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c21 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a120
                           , S(" has ")
                           , b68
                           , S(" ")
                           , c22
                           ]
                         )
                       ]
    where a120 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b68 := <pp-one-Z(prettyprint-Id)> b
    where c22 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a121, S(" :-")]
                 )
               ]
    where a121 := <pp-H-list(prettyprint-Pattern|" + ")> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a122]
                  )
                ]
    where a122 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Combine(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a123, S(" or "), b69]
                       )
                     ]
    where a123 := <pp-one-Z(prettyprint-Term)> a
    where b69 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id