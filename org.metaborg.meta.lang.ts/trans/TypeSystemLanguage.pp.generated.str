module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a0
                    ]
    where a0 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a1]
                           )
                         ]
    where a1 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a2]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b0]
                        )
                      ]
    where a2 := <pp-one-Z(prettyprint-PropPattern)> a
    where b0 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a3]
           )
         ]
    where a3 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a4
                         , S(" else error ")
                         , b1
                         , S(" on ")
                         , c0
                         ]
                       )
                     ]
    where a4 := <pp-one-Z(prettyprint-Formula)> a
    where b1 := <pp-one-Z(prettyprint-Term)> b
    where c0 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a5]
                )
              ]
    where a5 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a6]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b2]
                  )
                ]
    where a6 := <pp-one-Z(prettyprint-Formula)> a
    where b2 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a7]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b3]
                   )
                 ]
    where a7 := <pp-one-Z(prettyprint-Formula)> a
    where b3 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a8, S(" :: "), b4]
                     )
                   ]
    where a8 := <pp-one-Z(prettyprint-LId)> a
    where b4 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a9, S(")")]
                          )
                        ]
    where a9 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-SubTypeOp =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SubTypeOp


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a10, S(" : "), b5]
                       )
                     ]
    where a10 := <pp-one-Z(prettyprint-Term)> a
    where b5 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    SubType(a, b, c) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a11
                            , S(" ")
                            , b6
                            , S(" ")
                            , c1
                            ]
                          )
                        ]
    where a11 := <pp-one-Z(prettyprint-Term)> a
    where b6 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c1 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a12
                        , S(" has ")
                        , b7
                        , S(" ")
                        , c2
                        ]
                      )
                    ]
    where a12 := <pp-one-Z(prettyprint-Term)> a
    where b7 := <pp-one-Z(prettyprint-Id)> b
    where c2 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a13, S(" == "), b8]
                  )
                ]
    where a13 := <pp-one-Z(prettyprint-Term)> a
    where b8 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a14, S(" => "), b9]
                     )
                   ]
    where a14 := <pp-one-Z(prettyprint-Term)> a
    where b9 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a15, S(" : "), b10]
                          )
                        ]
    where a15 := <pp-one-Z(prettyprint-Pattern)> a
    where b10 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    SubTypePat(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a16
                               , S(" ")
                               , b11
                               , S(" ")
                               , c3
                               ]
                             )
                           ]
    where a16 := <pp-one-Z(prettyprint-Pattern)> a
    where b11 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c3 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a17
                           , S(" has ")
                           , b12
                           , S(" ")
                           , c4
                           ]
                         )
                       ]
    where a17 := <pp-one-Z(prettyprint-Pattern)> a
    where b12 := <pp-one-Z(prettyprint-Id)> b
    where c4 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a18, S(" :-")]
                 )
               ]
    where a18 := <pp-one-Z(prettyprint-Pattern)> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a19]
                  )
                ]
    where a19 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Combine(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a20, S(" or "), b13]
                       )
                     ]
    where a20 := <pp-one-Z(prettyprint-Term)> a
    where b13 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id