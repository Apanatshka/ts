module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a85
                    ]
    where a85 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a86]
                           )
                         ]
    where a86 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a87]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b44]
                        )
                      ]
    where a87 := <pp-one-Z(prettyprint-PropPattern)> a
    where b44 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a88]
           )
         ]
    where a88 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a89
                         , S(" else error ")
                         , b45
                         , S(" on ")
                         , c15
                         ]
                       )
                     ]
    where a89 := <pp-one-Z(prettyprint-Formula)> a
    where b45 := <pp-one-Z(prettyprint-Term)> b
    where c15 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a90]
                )
              ]
    where a90 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a91]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b46]
                  )
                ]
    where a91 := <pp-one-Z(prettyprint-Formula)> a
    where b46 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a92]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b47]
                   )
                 ]
    where a92 := <pp-one-Z(prettyprint-Formula)> a
    where b47 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a93, S(" :: "), b48]
                     )
                   ]
    where a93 := <pp-one-Z(prettyprint-LId)> a
    where b48 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a94, S(")")]
                          )
                        ]
    where a94 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-SubTypeOp =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SubTypeOp


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a95, S(" : "), b49]
                       )
                     ]
    where a95 := <pp-one-Z(prettyprint-Term)> a
    where b49 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a96
                        , S(" has ")
                        , b50
                        , S(" ")
                        , c16
                        ]
                      )
                    ]
    where a96 := <pp-one-Z(prettyprint-Term)> a
    where b50 := <pp-one-Z(prettyprint-Id)> b
    where c16 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a97, S(" == "), b51]
                  )
                ]
    where a97 := <pp-one-Z(prettyprint-Term)> a
    where b51 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a98, S(" => "), b52]
                     )
                   ]
    where a98 := <pp-one-Z(prettyprint-Term)> a
    where b52 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a99, S(" : "), b53]
                          )
                        ]
    where a99 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b53 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a100
                           , S(" has ")
                           , b54
                           , S(" ")
                           , c17
                           ]
                         )
                       ]
    where a100 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b54 := <pp-one-Z(prettyprint-Id)> b
    where c17 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a101, S(" :-")]
                 )
               ]
    where a101 := <pp-H-list(prettyprint-Pattern|" + ")> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a102]
                  )
                ]
    where a102 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Union(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a103, S(" union "), b55]
                     )
                   ]
    where a103 := <pp-one-Z(prettyprint-Term)> a
    where b55 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Term :
    Choice(a, b) -> [ H(
                        [SOpt(HS(), "0")]
                      , [a104, S(" or "), b56]
                      )
                    ]
    where a104 := <pp-one-Z(prettyprint-Term)> a
    where b56 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id