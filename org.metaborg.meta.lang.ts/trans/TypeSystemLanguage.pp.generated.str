module TypeSystemLanguage.pp.generated

strategies
  prettyprint-ModuleSection :
    TypeRules(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [S("type rules")]
                      )
                    , H(
                        []
                      , [S("")]
                      )
                    , a12
                    ]
    where a12 := <pp-indent(|"2")> [<pp-V-list(prettyprint-TypeRule|"1")> a]

  prettyprint-TypeRule :
    TypeRuleUnCond(a) -> [ H(
                             [SOpt(HS(), "0")]
                           , [a13]
                           )
                         ]
    where a13 := <pp-one-Z(prettyprint-PropPattern)> a

  prettyprint-TypeRule :
    TypeRule(a, b) -> [ H(
                          [SOpt(HS(), "0")]
                        , [a14]
                        )
                      , H(
                          [SOpt(HS(), "0")]
                        , [S("where "), b6]
                        )
                      ]
    where a14 := <pp-one-Z(prettyprint-PropPattern)> a
    where b6 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-TypeRule


strategies
  prettyprint-Formula :
    a -> [ H(
             [SOpt(HS(), "0")]
           , [a15]
           )
         ]
    where a15 := <pp-one-Z(prettyprint-Prop)> a

  prettyprint-Formula :
    Else(a, b, c) -> [ H(
                         [SOpt(HS(), "0")]
                       , [ a16
                         , S(" else error ")
                         , b7
                         , S(" on ")
                         , c2
                         ]
                       )
                     ]
    where a16 := <pp-one-Z(prettyprint-Formula)> a
    where b7 := <pp-one-Z(prettyprint-Term)> b
    where c2 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Formula :
    Not(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("not "), a17]
                )
              ]
    where a17 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-Formula :
    Or(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a18]
                  )
                , H(
                    [SOpt(HS(), "0")]
                  , [S("or "), b8]
                  )
                ]
    where a18 := <pp-one-Z(prettyprint-Formula)> a
    where b8 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    And(a, b) -> [ H(
                     [SOpt(HS(), "0")]
                   , [a19]
                   )
                 , H(
                     [SOpt(HS(), "0")]
                   , [S("and "), b9]
                   )
                 ]
    where a19 := <pp-one-Z(prettyprint-Formula)> a
    where b9 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Label(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a20, S(" :: "), b10]
                     )
                   ]
    where a20 := <pp-one-Z(prettyprint-LId)> a
    where b10 := <pp-one-Z(prettyprint-Formula)> b

  prettyprint-Formula :
    Parenthetical(a) -> [ H(
                            [SOpt(HS(), "0")]
                          , [S("("), a21, S(")")]
                          )
                        ]
    where a21 := <pp-one-Z(prettyprint-Formula)> a

  prettyprint-example =
    prettyprint-Formula


strategies
  prettyprint-SubTypeOp =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-SubTypeOp


strategies
  prettyprint-Prop :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  prettyprint-Prop :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  prettyprint-Prop :
    HasType(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a22, S(" : "), b11]
                       )
                     ]
    where a22 := <pp-one-Z(prettyprint-Term)> a
    where b11 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-Prop :
    SubType(a, b, c) -> [ H(
                            [SOpt(HS(), "0")]
                          , [ a23
                            , S(" ")
                            , b12
                            , S(" ")
                            , c3
                            ]
                          )
                        ]
    where a23 := <pp-one-Z(prettyprint-Term)> a
    where b12 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c3 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-Prop :
    Has(a, b, c) -> [ H(
                        [SOpt(HS(), "0")]
                      , [ a24
                        , S(" has ")
                        , b13
                        , S(" ")
                        , c4
                        ]
                      )
                    ]
    where a24 := <pp-one-Z(prettyprint-Term)> a
    where b13 := <pp-one-Z(prettyprint-Id)> b
    where c4 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-Prop :
    Eq(a, b) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a25, S(" == "), b14]
                  )
                ]
    where a25 := <pp-one-Z(prettyprint-Term)> a
    where b14 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Prop :
    Match(a, b) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a26, S(" => "), b15]
                     )
                   ]
    where a26 := <pp-one-Z(prettyprint-Term)> a
    where b15 := <pp-one-Z(prettyprint-Pattern)> b

  prettyprint-example =
    prettyprint-Prop


strategies
  prettyprint-PropPattern :
    HasTypePat(a, b) -> [ H(
                            [SOpt(HS(), "0")]
                          , [a27, S(" : "), b16]
                          )
                        ]
    where a27 := <pp-H-list(prettyprint-Pattern|" + ")> a
    where b16 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-PropPattern :
    SubTypePat(a, b, c) -> [ H(
                               [SOpt(HS(), "0")]
                             , [ a28
                               , S(" ")
                               , b17
                               , S(" ")
                               , c5
                               ]
                             )
                           ]
    where a28 := <pp-one-Z(prettyprint-Pattern)> a
    where b17 := <pp-one-Z(prettyprint-SubTypeOp)> b
    where c5 := <pp-one-Z(prettyprint-Pattern)> c

  prettyprint-PropPattern :
    HasPat(a, b, c) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a29
                           , S(" has ")
                           , b18
                           , S(" ")
                           , c6
                           ]
                         )
                       ]
    where a29 := <pp-one-Z(prettyprint-Pattern)> a
    where b18 := <pp-one-Z(prettyprint-Id)> b
    where c6 := <pp-one-Z(prettyprint-Term)> c

  prettyprint-PropPattern :
    IsWF(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a30, S(" :-")]
                 )
               ]
    where a30 := <pp-H-list(prettyprint-Pattern|" + ")> a

  prettyprint-example =
    prettyprint-PropPattern


strategies
  prettyprint-Term :
    DefOf(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("definition of "), a31]
                  )
                ]
    where a31 := <pp-one-Z(prettyprint-Term)> a

  prettyprint-Term :
    Combine(a, b) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a32, S(" or "), b19]
                       )
                     ]
    where a32 := <pp-one-Z(prettyprint-Term)> a
    where b19 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-example =
    prettyprint-Term


strategies
  prettyprint-Id :
    () -> [ H(
              [SOpt(HS(), "0")]
            , [S("where")]
            )
          ]

  prettyprint-example =
    prettyprint-Id