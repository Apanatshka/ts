module desugar

imports
  
  include/TypeSystemLanguage
	label

rules // desugaring
  
  desugar-all = 
    innermost(desugar)
   
  desugar :
  	TypeRules(t*) -> TypeRules(<concat> t*)
   
  desugar :
  	TypeRule(HasTypePat(pattern*, val), body) -> <map(\p -> TypeRule(HasTypePat(p, val), body)\)> pattern*
  	
  desugar :
  	TypeRule(IsWF(pattern*), body) -> <map(\p -> TypeRule(IsWF(p), body)\)> pattern*
  	
  desugar :
    And(x, And(y, z)) -> And(And(x, y), z) 
    
  desugar :
    And(True(), p) -> p
    
  desugar :
    And(p, True()) -> p 
  
  desugar :
    TypeRuleUnCond(prop) -> TypeRule(prop, True())
      
  desugar :
    HasType(trm, pat) -> Has(trm, "type", pat)
  
  desugar :
    HasTypePat(pat, trm) -> HasPat(pat, "type", trm)
    
  desugar :
    Has(trm, kind, pat) -> And(Has(trm, kind, Var(t)), Match(VarRef(t), pat))
    where <not(?Var(_))> pat; t := <newname> "t"
    
  desugar :
    ListVar(x) -> Var(<unstar>x)
    
  desugar :
    ListVarRef(x) -> VarRef(<unstar>x) 
    
  unstar = 
    explode-string; map(try(\ 42 -> 95 \)); implode-string
    
