module desugar

imports
  
  include/TypeSystemLanguage
	label
	utils

strategies // desugaring
  
  desugar-all = 
    innermost(desugar)

rules // unconditional rules
  
  desugar :
    TypeRuleUnCond(prop) -> TypeRule(prop, True())
      
rules // rule splitting
   
  desugar :
  	TypeRules(t*) -> TypeRules(<mapconcat(split-rule <+ MkSingleton); not(?t*)> t*)
  
  split-rule :
    TypeRuleUnCond(pat) -> <split-patterns; map(!TypeRuleUnCond(<id>))> pat

  split-rule :
    TypeRule(pat, form) -> <split-patterns; map(!TypeRule(<id>, form))> pat
    
  split-patterns : 
  	HasTypePat(pat*, trm) -> <map(!HasTypePat(<id>, trm))> pat*
  	
  split-patterns : 
  	HasPat(pat*, kind, trm) -> <map(!HasPat(<id>, kind, trm))> pat*
  	
  split-patterns : 
  	IsWF(pat*) -> <map(!IsWF(<id>))> pat*
   
rules // normalization 	
  	
  desugar :
    And(And(x, y), z) -> And(x, And(y, z))
    
  desugar :
    And(True(), p) -> p
    
  desugar :
    And(p, True()) -> p 
    
  desugar :
    Or(p, False()) -> p
  
  desugar :
    Or(False(), p) -> p
    
rules // terms
	
	desugar :
		Tuple([t]) -> t
    
rules // propositions
      
  desugar :
    HasType(trm, pat) -> Has(trm, "type", pat)
  
  desugar :
    HasTypePat(pat, trm) -> HasPat(pat, "type", trm)
    
  desugar :
    Has(trm, kind, pat) -> And(Has(trm, kind, Var(x)), Match(VarRef(x), pat))
    where <not(?Var(_))> pat; x := <newname> "x"
    
  desugar :
    TypeRule(HasPat(pat, kind, trm), form) -> 
    TypeRule(HasPat(pat, kind, VarRef(x)), And(form, Match(trm, Var(x))))
    where <not(?VarRef(_))> trm; x := <newname> "x"

  desugar :
  	Ia(Var(x), Return(trm)) -> I(Bind(trm, Var(x)))

  desugar :
  	Iad(Var(x), Return(trm), VarRef(d)) -> Id(Bind(trm, Var(x)), VarRef(d))
  	
rules // unstar list variables
      
  desugar :
    ListVar(x) -> Var(<unstar>x)
    
  desugar :
    ListVarRef(x) -> VarRef(<unstar>x) 
    
  unstar = 
    explode-string; map(try(\ 42 -> 95 \)); implode-string
    
rules // split Match into more specific operations
  
  desugar :
    Match(pat, Var(x)) -> Bind(pat, Var(x))
    
  desugar :
    Match(trm, pat) -> Eq(trm, pat)
    where <pattern-vars> pat => []
    
  desugar :
    prop@Match(trm, pat) -> form
    where not(<?Var(_)> pat); ys := <pattern-vars> pat; not([])
        ; form := <foldr(!True(), !And(<Fst; mk-project(|trm, pat)>, <Snd>))> ys
                   
  mk-project(|trm, pat) :
    y -> Project(trm, <alltd(\Var(x) -> Wld() where not(<eq>(x,y))\)>pat)

rules // bindings in multiple branches of an Or
  
  desugar :
    Or(form1, form2) -> And(Or(form1', form2'), form)
    where v* := <isect> (<form-vars> form1, <form-vars> form2) 
        ; not([])
        ; {| RenameLeft, RenameRight
           : form := <foldr(!True(), \(v, f) -> And(<rename-var>v, f)\)> v* 
           ; form1' := <alltd(RenameLeft)> form1
           ; form2' := <alltd(RenameRight)> form2
           |}
             
  rename-var :
    Var(x) -> Match(Choice(VarRef(z1), VarRef(z2)), Var(x))
    where z1 := <newname> x
        ; z2 := <newname> x
        ; rules( 
            RenameLeft  : Var(x) -> Var(z1) 
            RenameRight : Var(x) -> Var(z2) 
          )

   
    
