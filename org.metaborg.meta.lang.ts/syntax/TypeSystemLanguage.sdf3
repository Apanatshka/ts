module TypeSystemLanguage

imports 
  common/Identifiers   
  common/Layout 
  terms/Terms
  Module

context-free start-symbols Module

templates

  // TsModule.Module = <
  //   module <Id> 
  //     <TypeRules*; separator="\n\n">
  // >  

  ModuleSection.TypeRules = <
    type rules
    
      <TypeRule*; separator="\n\n">
    >

  TypeRule.TypeRuleUnCond = 
    <<PropPattern>>

  TypeRule.TypeRule = <
    <PropPattern>
    where <Formula>
    >

templates // formulas

  Formula = <<Prop>>

  Formula.Else = <
    <Formula> else error <Term> on <Term>
  > {left} 
  
  Formula.Not = <
    not <Formula>
  >
    
  Formula.Or = <
    <Formula> 
    or <Formula>
  > {assoc}
   
  Formula.And = <
    <Formula> 
    and <Formula>
  > {assoc}
  
  Formula.Label = <
    <LId> :: <Formula>
  >
  
  Formula = <(<Formula>)> {bracket}
  
context-free priorities

   Formula.Label > Formula.Not > Formula.Else > Formula.And > Formula.Or
   
lexical syntax

  SubTypeOp = "<" Id? ":"
   
templates // propositions
  
  Prop.True    = <true>
  Prop.False   = <false>
  Prop.HasType = <<Term> : <Pattern>>
  Prop.SubType = [[Term] [SubTypeOp] [Term]]  
  Prop.Has     = <<Term> has <Id> <Pattern>>  
  Prop.Eq      = [[Term] == [Term]] 
   
  Prop.Match   = [[Term] => [Pattern]]
  
templates // proposition patterns
   
  PropPattern.HasTypePat = <<Pattern> : <Term>>
  PropPattern.SubTypePat = [[Pattern] [SubTypeOp] [Pattern]]
  PropPattern.HasPat     = <<Pattern> has <Id> <Term>>
  PropPattern.IsWF       = <<Pattern> :->
     
templates // term operators

  Term.DefOf = <definition of <Term>>
  
  Term.Combine = <<Term> or <Term>>

templates // keywords

  Id = <where> {reject}
  
  
  
   