module TypeSystemLanguage
imports common/Identifiers common/Layout terms/Terms terms/Vars Module
        Signatures TypeFunctions Relations PP

exports
  context-free start-symbols
    Module

  context-free syntax
    "type" "rules" TypeRule*    -> ModuleSection {cons("TypeRules")}
    PropPattern                 -> TypeRule      {cons("TypeRuleUnCond")}
    PropPattern "where" Formula -> TypeRule      {cons("TypeRule")}

  context-free syntax
    CONTENTCOMPLETE -> ModuleSection {cons("COMPLETION-ModuleSection")}
    CONTENTCOMPLETE -> TypeRule      {cons("COMPLETION-TypeRule")}

  context-free syntax
    Prop                                  -> Formula 
    Formula "else" "error" Term "on" Term -> Formula {cons("Else"), left}
    "not" Formula                         -> Formula {cons("Not")}
    Formula "or" Formula                  -> Formula {cons("Or"), assoc}
    Formula "par" Formula                 -> Formula {cons("Par"), assoc}
    Formula "and" Formula                 -> Formula {cons("And"), assoc}
    LId "::" Formula                      -> Formula {cons("Label")}
    "(" Formula ")"                       -> Formula {bracket}

  context-free syntax
    CONTENTCOMPLETE -> Formula {cons("COMPLETION-Formula")}

  context-free syntax
    "[" Instruction* "]"                   -> Formula     {cons("Is")}
    Formula ";"                            -> Instruction {cons("I")}
    Formula "provided" VarRef ";"          -> Instruction {cons("Id")}
    Var ":=" Formula ";"                   -> Instruction {cons("Ia")}
    Var ":=" Formula "provided" VarRef ";" -> Instruction {cons("Iad")}

  context-free syntax
    CONTENTCOMPLETE -> Formula     {cons("COMPLETION-Formula")}
    CONTENTCOMPLETE -> Instruction {cons("COMPLETION-Instruction")}

  context-free priorities
    LId "::" Formula -> Formula >
    "not" Formula -> Formula >
    Formula "else" "error" Term "on" Term -> Formula >
    Formula "and" Formula -> Formula >
    Formula "par" Formula -> Formula >
    Formula "or" Formula -> Formula

  lexical syntax
    "<" Id? ":" -> SubTypeOp 

  context-free syntax
    "true"                   -> Prop {cons("True")}
    "false"                  -> Prop {cons("False")}
    Term ":" Pattern         -> Prop {cons("HasType")}
    Term "has" Id Pattern    -> Prop {cons("Has")}
    Term "==" Term           -> Prop {cons("Eq")}
    Term "=>" Pattern        -> Prop {cons("Match")}
    Term "bind" Var          -> Prop {cons("Bind")}
    VarRef "project" Pattern -> Prop {cons("Project")}
    "return" Term            -> Prop {cons("Return")}

  context-free syntax
    CONTENTCOMPLETE -> Prop {cons("COMPLETION-Prop")}

  context-free syntax
    {Pattern "+"}+ ":" Term      -> PropPattern {cons("HasTypePat")}
    {Pattern "+"}+ "has" Id Term -> PropPattern {cons("HasPat")}
    {Pattern "+"}+ ":-"          -> PropPattern {cons("IsWF")}

  context-free syntax
    CONTENTCOMPLETE -> PropPattern {cons("COMPLETION-PropPattern")}

  context-free syntax
    "definition" "of" Term -> Term {cons("DefOf")}
    Term "union" Term      -> Term {cons("Union")}
    Term "or" Term         -> Term {cons("Choice")}

  context-free syntax
    CONTENTCOMPLETE -> Term {cons("COMPLETION-Term")}

  context-free syntax
    "where" -> Id {reject}

  context-free syntax
    CONTENTCOMPLETE -> Id {cons("COMPLETION-Id")}